bool isPalindrome(string s, int start, int end) {
    while (start <= end) {
        if (s[start++] != s[end--])
            return false; // Check if characters at start and end do not match
    }
    return true; // If all characters matched, the substring is a palindrome
}

void partitionHelper(int index, string s, vector<string>& path,
                     vector<vector<string>>& res) {
    if (index == s.size()) {
        res.push_back(path); // Add the current partition path to the result
        return;
    }
    for (int i = index; i < s.size(); ++i) {
        if (isPalindrome(s, index, i)) { // Check if substring is a palindrome
            path.push_back(s.substr(index, i - index + 1)); // Add the palindrome substring to path
            partitionHelper(i + 1, s, path, res); // Recursively find next palindrome substring
            path.pop_back(); // Backtrack: remove last added palindrome substring
        }
    }
}

vector<vector<string>> partition(string s) {
    vector<vector<string>> res; // Stores the final result
    vector<string> path; // Temporary path to store palindrome substrings
    partitionHelper(0, s, path, res); // Start partitioning from index 0
    return res; // Return the result containing all valid partitions
}
